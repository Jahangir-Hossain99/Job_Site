// models/Job.js
import mongoose from 'mongoose';
import Application from './Application.js'; // Import Application model for pre-deleteOne hook

const jobSchema = new mongoose.Schema({
    company: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Company',
        required: true
    },
    title: {
        type: String,
        required: [true, 'Job title is required'],
        trim: true
    },
    description: {
        type: String,
        required: [true, 'Job description is required']
    },
    location: {
        type: String,
        trim: true
    },
    jobType: {
        type: String,
        enum: ['Full-time', 'Part-time', 'Contract', 'Temporary', 'Internship'],
        required: [true, 'Job type is required']
    },
    salaryRange: {
        min: Number,
        max: Number
    },
    requirements: {
        type: [String], // Array of strings for skills, qualifications
        default: []
    },
    responsibilities: {
        type: [String], // Array of strings for duties
        default: []
    },
    benefits: {
        type: [String], // Array of strings for benefits offered
        default: []
    },
    applicationDeadline: {
        type: Date
    },
    status: {
        type: String,
        enum: ['active', 'inactive', 'pending_review', 'closed', 'draft'],
        default: 'pending_review'
    },
    applicants: [{ // Array to store IDs of applications received (Data Consistency NFR)
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Application'
    }],
    viewsCount: {
        type: Number,
        default: 0
    },
    isFlagged: { // For scam detection or inappropriate content
        type: Boolean,
        default: false
    },
    flagReason: { // Reason for flagging, potentially from AI
        type: String,
        trim: true
    },
    // AI Integration Fields
    aiKeywords: { // Keywords extracted/generated by AI for better matching
        type: [String],
        default: []
    },
    aiJobVector: { // Optional: if AI needs to store a vector representation of job details
        type: [Number], // Array of numbers
        select: false // Do not return by default
    }
}, { timestamps: true });

// Ensure applicationDeadline is in the future if provided
jobSchema.path('applicationDeadline').validate(function(value) {
    if (value && value < new Date()) {
        return false; // Validation failed
    }
    return true; // Validation passed
}, 'Application deadline must be in the future.');


// Pre-deleteOne hook to delete associated applications when a job is deleted
jobSchema.pre('deleteOne', { document: true, query: false }, async function (next) {
    try {
        // Find and delete all applications associated with this job
        await Application.deleteMany({ job: this._id });
        console.log(`Deleted applications for job: ${this._id}`);
        next();
    } catch (error) {
        console.error('Error deleting applications for job:', error);
        next(error);
    }
});


const Job = mongoose.model('Job', jobSchema);
export default Job;